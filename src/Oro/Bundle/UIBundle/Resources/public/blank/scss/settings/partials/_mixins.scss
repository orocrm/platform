// @theme: blank;

@mixin after() {
    content: '';

    position: absolute;

    display: block;
}

// Helper to clear inner floats
@mixin clearfix {
    &::after {
        content: '';

        display: block;

        clear: both;
    }
}

// Helper for reset default styles of lists
@mixin list-normalize() {
    list-style: none;
    margin: 0;
    padding: 0;
}

// Use: @include breakpoint('desktop') {
//  content
//}
@mixin breakpoint($type) {
    // $breakpoints - global variable;

    @if (map_has_key($breakpoints, $type)) {
        @media #{map-get($breakpoints, $type)} {
            @content;
        }
    } @else {
        @warn 'Absent breakpoint type: ' + $type;
    }
}

// Use: @include font-face('Lato', '../fonts/lato/lato-regular-webfont', 400, normal);
@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
    @font-face {
        font-family: $font-family;
        src: url('#{$file-path}.eot');
        src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
        url('#{$file-path}.woff') format('woff'),
        url('#{$file-path}.ttf') format('truetype'),
        url('#{$file-path}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
    }
    // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
        @font-face {
            font-family: $font-family;
            src: url('#{$file-path}.svg##{$font-family}') format('svg');
        }
    }
}

// Parse list with $fonts and call Mixin font-face();
// $fonts: (
//     'main': (
//         'family': 'Test1',
//         'variants': (
//             (
//                 'path': '...',
//                 'weight': normal,
//                 'style': normal
//             ),
//             (
//                 'path': '..',
//                 'weight': 700,
//                 'style': normal
//             )
//         ),
//     ),
//     'secondary': (
//         'family': 'Test2',
//         'variants': (
//             (
//                 'path': '...',
//             )
//         )
//     )
// );
// Use: @include use-font-face($fonts);
@mixin use-font-face($fonts: ()) {
    // Iterate index;
    $font-index: 0;

    // List with section keys
    // ('main', 'secondary', 'icon')
    $font-names: map_keys($fonts);

    @mixin include-font-face($font-family, $file-path, $font-weigh, $font-style) {
        @if ($font-family and $file-path) {
            // Calling mixin font-face(family, path, $weigh, style);
            @include font-face($font-family, $file-path, $font-weigh, $font-style);
        } @else {
            @warn 'Absent family or path keys in a list.';
        }
    }

    @if (length($fonts) >= 1) {
        @each $font in $fonts {
            $font-index: $font-index + 1;

            // Iterate section name
            // 'main' or 'secondary' or 'icon' or '...'
            $current-section-name: nth($font-names, $font-index);

            // Iterate section
            // (
            //    'family': '...',
            //    'variants': (
            //       (
            //            'path': '...',
            //            'weight': normal,
            //            'style': normal
            //        ),
            //     )
            //  )
            $current-section: map_get($fonts, $current-section-name);

            // Iterate 'variants' section
            // (
            //     (
            //         'path': '...',
            //         'weight': normal,
            //         'style': normal
            //     ),
            // )

            // Iterate font variants
            $font-variants: map_get($current-section, 'variants');

            @if (type-of($font-variants) == 'map' or type-of($font-variants) == 'list') {
                // Get Iterate section 'family'
                $font-family: map_get($current-section, 'family');

                // Default value
                $file-path: null;

                // Default value
                $font-weigh: normal;

                // Default value
                $font-style: normal;

                @if (type-of($font-variants) == 'map') {
                    $file-path: map_get($font-variants, 'path');

                    // Sections 'variants' and 'style' not required.
                    // Update only if They are defined in iterate  section.
                    @if (map_has_key($font-variants, 'weight')) {
                        $font-weigh: map_get($font-variants, 'weight');
                    }
                    @if (map_has_key($font-variants, 'style')) {
                        $font-style: map_get($font-variants, 'style');
                    }

                    @include include-font-face($font-family, $file-path, $font-weigh, $font-style);
                }

                @if (type-of($font-variants) == 'list') {
                    @each $font-variant in $font-variants {
                        $file-path: map_get($font-variant, 'path');

                        // Sections 'variants' and 'style' not required.
                        // Update only if They are defined in iterate  section.
                        @if (map_has_key($font-variant, 'weight')) {
                            $font-weigh: map_get($font-variant, 'weight');
                        }
                        @if (map_has_key($font-variants, 'style')) {
                            $font-style: map_get($font-variant, 'style');
                        }

                        @include include-font-face($font-family, $file-path, $font-weigh, $font-style);
                    }
                }
            } @else {
                @warn 'Section "variants" should be of a "map" or "list" type.';
            }
        }
    }
}

// Check devices on server, if device is desktop added class to body (.desktop-version)
@mixin only-desktop {
    @include breakpoint('desktop') {
        .desktop-version {
            @content;
        }
    }
}

// Wrap element
@mixin fullscreen-mode {
    @at-root {
        .fullscreen-mode {
            @content;
        }
    }
}
// Mixin for border, if need to use shorthand property, set $use-shorthand to true
// Null property doesn't render
@mixin border(
        $width: null,
        $style: null,
        $color: null,
        $use-shorthand: false
    ) {
    @if ($use-shorthand) {
        border: $width $style $color;
    } @else {
        border-width: $width;
        border-style: $style;
        border-color: $color;
    }
}

// Mixin for tabs
@mixin nav-tabs(
        // Selectors
        $nav-tabs: '.nav-tabs',
        $nav-tabs-item: '.nav-item',
        $nav-tabs-item-active: '.active',
        $nav-tabs-link: '.nav-link',

        // tabs wrapper
        $nav-tabs-offset: null,
        $nav-tabs-inner-offset: null,
        $nav-tabs-border-width: null,
        $nav-tabs-border-style: null,
        $nav-tabs-border-color: null,
        $nav-tabs-background: null,
        $nav-tabs-align-items: null,
        $nav-tabs-justify-content: flex-start,
        $nav-tabs-wrap: nowrap,
        $nav-tabs-gap: 0,

        // tabs item
        $nav-tabs-item-flex: null,
        
        // tabs link
        $nav-tabs-link-inner-offset: null,
        $nav-tabs-link-text-align: center,
        $nav-tabs-link-background: null,
        $nav-tabs-link-border-width: null,
        $nav-tabs-link-border-style: null,
        $nav-tabs-link-border-color: null,
        $nav-tabs-link-color: null,
        
        // tabs link hover
        $nav-tabs-link-hover-inner-offset: null,
        $nav-tabs-link-hover-text-decoration: null,
        $nav-tabs-link-hover-background: null,
        $nav-tabs-link-hover-border-width: null,
        $nav-tabs-link-hover-border-style: null,
        $nav-tabs-link-hover-border-color: null,
        $nav-tabs-link-hover-color: null,

        // tabs link active
        $nav-tabs-link-active-inner-offset: null,
        $nav-tabs-link-active-background: null,
        $nav-tabs-link-active-border-width: null,
        $nav-tabs-link-active-border-style: null,
        $nav-tabs-link-active-border-color: null,
        $nav-tabs-link-active-color: null
    ) {
    #{$nav-tabs} {
        margin: $nav-tabs-offset;
        padding: $nav-tabs-inner-offset;

        background: $nav-tabs-background;

        display: flex;
        flex-wrap: $nav-tabs-wrap;
        align-items: $nav-tabs-align-items;
        justify-content: $nav-tabs-justify-content;

        @include border($nav-tabs-border-width, $nav-tabs-border-style, $nav-tabs-border-color);

        &:after {
            // Disable bootstrap clearfix
            content: none;
        }
    }

    #{$nav-tabs-item} {
        flex: $nav-tabs-item-flex;

        &:not(:first-child) {
            margin-left: $nav-tabs-gap;
        }
    }

    #{$nav-tabs-link} {
        display: block;
        padding: $nav-tabs-link-inner-offset;

        text-align: $nav-tabs-link-text-align;

        background: $nav-tabs-link-background;
        color: $nav-tabs-link-color;

        @include border($nav-tabs-link-border-width, $nav-tabs-link-border-style, $nav-tabs-link-border-color);

        @include hover-focus {
            padding: $nav-tabs-link-hover-inner-offset;

            text-decoration: $nav-tabs-link-hover-text-decoration;

            background: $nav-tabs-link-hover-background;
            color: $nav-tabs-link-hover-color;

            @include border($nav-tabs-link-hover-border-width, $nav-tabs-link-hover-border-style, $nav-tabs-link-hover-border-color);
        }
    }

    #{$nav-tabs-item}#{$nav-tabs-item-active} #{$nav-tabs-link} {
        padding: $nav-tabs-link-active-inner-offset;

        background: $nav-tabs-link-active-background;
        color: $nav-tabs-link-active-color;

        @include border($nav-tabs-link-active-border-width, $nav-tabs-link-active-border-style, $nav-tabs-link-active-border-color);
    }

    @content;
}

// Mixin for inject vertical separators in list
// parent block should has position: relative
@mixin list-separator($enabled: true, $top: 1px, $bottom: 1px, $left: 0, $border: 1px solid) {
    @if ($enabled) {
        &:not(:first-child) {
            &:before {
                top: $top;
                left: $left;
                bottom: $bottom;

                border-left: $border;

                @include after();
            }
        }
    }
}

// Disable platform styles for input search
@mixin disable-search-styles($input) {
    #{$input}::-webkit-search-decoration,
    #{$input}::-webkit-search-cancel-button,
    #{$input}::-webkit-search-results-button,
    #{$input}::-webkit-search-results-decoration {
        display: none;
    }
}

// Maintain an elements aspect ratio, even as it scales
// $width and $height arguments for aspect ratio
// $content selector for inner content block
// $position [static|relative|absolute|fixed]
@mixin aspect-ratio($width: 1, $height: 1, $content: null, $position: relative) {
    position: $position;

    &:before {
        content: '';

        display: block;
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

    @if $content != null {
        > #{$content} {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
    }
}

@import 'mixins-for-components';

@mixin element-state($state) {
    @if $state == 'active' {
        &:active {
            @content;
        }
    }

    @else if $state == 'hover' {
        &:hover {
            @content;
        }
    }

    @else if $state == 'visited' {
        &:visited {
            @content;
        }
    }

    @else if $state == 'focus' {
        &:focus {
            @content;
        }
    }

    @else if $state == 'warning' {
        &--warning,
        &.warning {
            @content;
        }
    }

    @else if $state == 'success' {
        &--success,
        &.success {
            @content;
        }
    }

    @else if $state == 'error' {
        &--error,
        &.error {
            @content;
        }
    }

    @else if $state == 'disabled' {
        &--disabled,
        &.disabled,
        &:disabled {
            @content;
        }
    }
}
